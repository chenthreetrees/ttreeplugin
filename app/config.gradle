apply plugin: 'ttreeplugin'

import org.objectweb.asm.AnnotationVisitor
import org.objectweb.asm.MethodVisitor
import com.threetrees.plugin.asm.AutoMethodVisitor

ttree {
    name = "小傻逼"
    isDebug = true
    //具体配置
    matchData = [
            //是否使用注解来找对应方法
            'isAnotation'  : false,
            //方法的匹配，可以通过类名或者实现的接口名匹配
            'ClassFilter'  : [
                    ['ClassName' : 'com/threetree/ttreeplugin.MainActivity', 'InterfaceName': '',
                     'MethodName': 'test', 'MethodDes': '()V']
            ],
            //插入的字节码，方法的执行顺序visitAnnotation->onMethodEnter->onMethodExit
            'MethodVisitor': {
                MethodVisitor methodVisitor, int access, String name, String desc ->
                    MethodVisitor adapter = new AutoMethodVisitor(methodVisitor, access, name, desc) {
                        boolean isAnnotation = false

                        @Override
                        protected void onMethodEnter() {
                            super.onMethodEnter()

                            methodVisitor.visitLdcInsn(name);
                            methodVisitor.visitLdcInsn("========start=========");
                            methodVisitor.visitMethodInsn(184, "android/util/Log", "e", "(Ljava/lang/String;Ljava/lang/String;)I", false);
                        }

                        @Override
                        protected void onMethodExit(int opcode) {
                            super.onMethodExit(opcode)

                            methodVisitor.visitLdcInsn(name);
                            methodVisitor.visitLdcInsn("========end=========");
                            methodVisitor.visitMethodInsn(184, "android/util/Log", "e", "(Ljava/lang/String;Ljava/lang/String;)I", false);
                        }

                        /**
                         * 需要通过注解的方式加字节码才会重写这个方法来进行条件过滤
                         */
                        @Override
                        AnnotationVisitor visitAnnotation(String des, boolean visible) {
                            return super.visitAnnotation(des, visible)
                        }
                    }
                    return adapter
            }
    ]
}
